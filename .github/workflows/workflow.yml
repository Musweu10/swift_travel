name: Flutter Build

on:
  push:
    branches:
      - master

env:
  flutter_channel: dev
  java_version: 12.x
  node_version: 12.x
  build_android: true
  flutter_build_args: --dart-define=FLUTTER_WEB_USE_SKIA=true --dart-define=FLUTTER_WEB_USE_EXPERIMENTAL_CANVAS_TEXT=true

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    name: Deploy Android to Github Releases
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Java
        if: ${{ env.build_android == 'true' }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.java_version }}
      - name: Get latest Flutter release
        id: release_json
        run: echo "::set-output name=json::$(curl -s "https://storage.googleapis.com/flutter_infra/releases/releases_linux.json" | jq -r ".current_release.${{ env.flutter_channel }}")"
      - name: Get Flutter from cache
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/flutter
            $HOME/.pub-cache
          key: ${{ runner.OS }}-flutter-cache-${{ steps.release_json.outputs.json }}
      - name: Install Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.flutter_channel }}
      - name: Setup Flutter
        run: |
          flutter packages get
      - name: Pre-build configuration
        env:
          TZ: Europe/Zurich
        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          git_msg=$(printf "%q" "$(git log -1 --pretty=format:"%s")")
          now=$(date +"%H:%M:%S - %A %d %B %Y")
          cat > lib/utils/build.dart <<- EOM
          const String latestBuild = "${now}";
          const String commit = "${git_hash}";
          const String commitMessage = "${git_msg}";
          EOM
          echo "=== build.dart ==="
          cat lib/utils/build.dart
      - name: Build
        run: flutter build apk
      - name: Get hash
        id: git-data
        run: |
          echo "::set-output name=hash::$(git rev-parse --short "$GITHUB_SHA")"
          echo "::set-output name=msg::$(git log -1 --pretty=format:"%s")"
          echo "::set-output name=nbr::$GITHUB_RUN_NUMBER"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ci-build-${{ steps.git-data.outputs.nbr }}
          release_name: |
            CI Build #${{ steps.git-data.outputs.nbr }}
          body: |
            *This is an automated CI build for ${{ steps.git-data.outputs.hash }}.*

            `${{ steps.git-data.outputs.msg }}`
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build/app/outputs/flutter-apk/app-release.apk
          asset_name: travel-free-${{ steps.git-data.outputs.nbr }}.apk
          asset_content_type: application/vnd.android.package-archive
  deploy:
    name: Deploy to Testflight
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install gpg
        run: brew install gnupg
      - name: Setup provisioning profile
        env:
          IOS_KEYS: ${{ secrets.IOS_KEYS }}
        run: chmod +x CI/decrypt_secrets.sh && bash CI/decrypt_secrets.sh
      - name: Get latest Flutter release
        id: release_json
        run: echo "::set-output name=json::$(curl -s "https://storage.googleapis.com/flutter_infra/releases/releases_linux.json" | jq -r ".current_release.${{ env.flutter_channel }}")"
      - name: Get Flutter from cache
        uses: actions/cache@v2
        with:
          path: |
            /opt/hostedtoolcache/flutter
            $HOME/.pub-cache
          key: ${{ runner.OS }}-flutter-cache-${{ steps.release_json.outputs.json }}
      - name: Install Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.flutter_channel }}
      - name: Setup Flutter
        run: |
          flutter packages get
      - name: Pre-build configuration
        env:
          TZ: Europe/Zurich
        run: |
          git_hash=$(git rev-parse --short "$GITHUB_SHA")
          git_msg=$(printf "%q" "$(git log -1 --pretty=format:"%s")")
          now=$(date +"%H:%M:%S - %A %d %B %Y")
          cat > lib/utils/build.dart <<- EOM
          const String latestBuild = "${now}";
          const String commit = "${git_hash}";
          const String commitMessage = "${git_msg}";
          EOM
          echo "=== build.dart ==="
          cat lib/utils/build.dart
      - name: Build
        run: flutter build ios
      - name: Get hash
        id: git-data
        run: |
          echo "::set-output name=hash::$(git rev-parse --short "$GITHUB_SHA")"
          echo "::set-output name=msg::$(git log -1 --pretty=format:"%s")"
          echo "::set-output name=nbr::$GITHUB_RUN_NUMBER"
      - name: Exporting .ipa
        run: chmod + x CI/export_ipa.sh && ./CI/export_ipa.sh
      - name: Publishing app
        if: success()
        env:
          APPLEID_USERNAME: ${{ secrets.APPLEID_USERNAME }}
          APPLEID_PASSWORD: ${{ secrets.APPLEID_PASSWORD }}
        run: chmod + x CI/publish_testflight.sh ./CI/publish_testflight.sh
